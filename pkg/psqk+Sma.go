package main

import (
	"database/sql"
	"encoding/json"
	"log"
	"sync"
	"time"

	_ "github.com/lib/pq"
	tele "gopkg.in/telebot.v3"
)

// PersistentNavigationManager - –º–µ–Ω–µ–¥–∂–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ PostgreSQL
type PersistentNavigationManager struct {
	db       *sql.DB
	cache    map[int64][]string  // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	cacheTTL map[int64]time.Time // TTL –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫—ç—à–∞
	mutex    sync.RWMutex
	backBtn  *tele.Btn

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
	maxCacheSize    int
	cacheTimeout    time.Duration
	maxStackDepth   int
	cleanupInterval time.Duration
}

// NavigationState –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ JSON
type NavigationState struct {
	UserID    int64     `json:"user_id"`
	MenuStack []string  `json:"menu_stack"`
	UpdatedAt time.Time `json:"updated_at"`
}

func NewPersistentNavigationManager(db *sql.DB) *PersistentNavigationManager {
	selector := &tele.ReplyMarkup{}
	backBtn := selector.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "persistent_back")

	pnm := &PersistentNavigationManager{
		db:              db,
		cache:           make(map[int64][]string),
		cacheTTL:        make(map[int64]time.Time),
		backBtn:         backBtn,
		maxCacheSize:    1000, // –ö—ç—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 1000 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		cacheTimeout:    10 * time.Minute,
		maxStackDepth:   20,
		cleanupInterval: 30 * time.Minute,
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
	pnm.createTable()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
	go pnm.cacheCleanupRoutine()
	go pnm.dbCleanupRoutine()

	return pnm
}

// createTable —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
func (pnm *PersistentNavigationManager) createTable() {
	query := `
    CREATE TABLE IF NOT EXISTS user_navigation (
        user_id BIGINT PRIMARY KEY,
        menu_stack JSONB NOT NULL,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    CREATE INDEX IF NOT EXISTS idx_user_navigation_updated_at 
    ON user_navigation(updated_at);
    `

	_, err := pnm.db.Exec(query)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: %v", err)
	} else {
		log.Println("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–∞")
	}
}

// PushMenu –¥–æ–±–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º (–∫—ç—à + –ë–î)
func (pnm *PersistentNavigationManager) PushMenu(userID int64, menuID string) error {
	pnm.mutex.Lock()
	defer pnm.mutex.Unlock()

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–µ–∫ (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î)
	stack, err := pnm.getStackFromCacheOrDB(userID)
	if err != nil {
		return err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
	if len(stack) > 0 && stack[len(stack)-1] == menuID {
		return nil
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Å—Ç–µ–∫–∞
	if len(stack) >= pnm.maxStackDepth {
		// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
		keepSize := pnm.maxStackDepth - 5
		stack = stack[len(stack)-keepSize:]
		log.Printf("‚ö†Ô∏è  User %d: Stack trimmed to %d elements", userID, keepSize)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
	stack = append(stack, menuID)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
	pnm.cache[userID] = stack
	pnm.cacheTTL[userID] = time.Now().Add(pnm.cacheTimeout)

	// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
	go pnm.saveToDBAsync(userID, stack)

	return nil
}

// PopMenu —É–±–∏—Ä–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ–Ω—é
func (pnm *PersistentNavigationManager) PopMenu(userID int64) (string, bool, error) {
	pnm.mutex.Lock()
	defer pnm.mutex.Unlock()

	stack, err := pnm.getStackFromCacheOrDB(userID)
	if err != nil {
		return "", false, err
	}

	if len(stack) <= 1 {
		return "", false, nil
	}

	// –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
	stack = stack[:len(stack)-1]
	prevMenu := stack[len(stack)-1]

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
	pnm.cache[userID] = stack
	pnm.cacheTTL[userID] = time.Now().Add(pnm.cacheTimeout)

	// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
	go pnm.saveToDBAsync(userID, stack)

	return prevMenu, true, nil
}

// getStackFromCacheOrDB –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–µ–∫ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ë–î
func (pnm *PersistentNavigationManager) getStackFromCacheOrDB(userID int64) ([]string, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	if stack, exists := pnm.cache[userID]; exists {
		if ttl, hasTTL := pnm.cacheTTL[userID]; hasTTL && time.Now().Before(ttl) {
			return stack, nil
		}
		// TTL –∏—Å—Ç–µ–∫, —É–¥–∞–ª—è–µ–º –∏–∑ –∫—ç—à–∞
		delete(pnm.cache, userID)
		delete(pnm.cacheTTL, userID)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
	return pnm.loadFromDB(userID)
}

// loadFromDB –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∏–∑ –ë–î
func (pnm *PersistentNavigationManager) loadFromDB(userID int64) ([]string, error) {
	var stackJSON []byte
	query := "SELECT menu_stack FROM user_navigation WHERE user_id = $1"

	err := pnm.db.QueryRow(query, userID).Scan(&stackJSON)
	if err != nil {
		if err == sql.ErrNoRows {
			return []string{}, nil // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		}
		return nil, err
	}

	var stack []string
	err = json.Unmarshal(stackJSON, &stack)
	if err != nil {
		return nil, err
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
	pnm.cache[userID] = stack
	pnm.cacheTTL[userID] = time.Now().Add(pnm.cacheTimeout)

	return stack, nil
}

// saveToDBAsync –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
func (pnm *PersistentNavigationManager) saveToDBAsync(userID int64, stack []string) {
	stackJSON, err := json.Marshal(stack)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞ –¥–ª—è user %d: %v", userID, err)
		return
	}

	query := `
    INSERT INTO user_navigation (user_id, menu_stack, updated_at) 
    VALUES ($1, $2, CURRENT_TIMESTAMP) 
    ON CONFLICT (user_id) 
    DO UPDATE SET 
        menu_stack = EXCLUDED.menu_stack,
        updated_at = CURRENT_TIMESTAMP
    `

	_, err = pnm.db.Exec(query, userID, stackJSON)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è user %d: %v", userID, err)
	}
}

// cacheCleanupRoutine –æ—á–∏—â–∞–µ—Ç –∫—ç—à –æ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
func (pnm *PersistentNavigationManager) cacheCleanupRoutine() {
	ticker := time.NewTicker(5 * time.Minute)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			pnm.cleanupCache()
		}
	}
}

// cleanupCache —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –∫—ç—à–∞
func (pnm *PersistentNavigationManager) cleanupCache() {
	pnm.mutex.Lock()
	defer pnm.mutex.Unlock()

	now := time.Now()
	var cleaned int

	for userID, ttl := range pnm.cacheTTL {
		if now.After(ttl) {
			delete(pnm.cache, userID)
			delete(pnm.cacheTTL, userID)
			cleaned++
		}
	}

	// –ï—Å–ª–∏ –∫—ç—à —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
	if len(pnm.cache) > pnm.maxCacheSize {
		// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —É–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
		excess := len(pnm.cache) - pnm.maxCacheSize + 100 // +100 –¥–ª—è –±—É—Ñ–µ—Ä–∞
		for userID := range pnm.cache {
			if excess <= 0 {
				break
			}
			delete(pnm.cache, userID)
			delete(pnm.cacheTTL, userID)
			excess--
			cleaned++
		}
	}

	if cleaned > 0 {
		log.Printf("üßπ –û—á–∏—â–µ–Ω–æ %d —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫—ç—à–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", cleaned)
	}
}

// dbCleanupRoutine —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
func (pnm *PersistentNavigationManager) dbCleanupRoutine() {
	ticker := time.NewTicker(pnm.cleanupInterval)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			pnm.cleanupOldNavigationData(24 * time.Hour) // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ —Å—É—Ç–æ–∫
		}
	}
}

// cleanupOldNavigationData —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
func (pnm *PersistentNavigationManager) cleanupOldNavigationData(maxAge time.Duration) {
	query := "DELETE FROM user_navigation WHERE updated_at < $1"
	cutoff := time.Now().Add(-maxAge)

	result, err := pnm.db.Exec(query, cutoff)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: %v", err)
		return
	}

	affected, _ := result.RowsAffected()
	if affected > 0 {
		log.Printf("üßπ –£–¥–∞–ª–µ–Ω–æ %d —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", affected)
	}
}

// GetNavigationStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (pnm *PersistentNavigationManager) GetNavigationStats() (map[string]interface{}, error) {
	pnm.mutex.RLock()
	cacheSize := len(pnm.cache)
	pnm.mutex.RUnlock()

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
	var dbRecords int
	var avgDepth float64
	var maxDepth int

	query := `
    SELECT 
        COUNT(*) as total_records,
        AVG(jsonb_array_length(menu_stack)) as avg_depth,
        MAX(jsonb_array_length(menu_stack)) as max_depth
    FROM user_navigation
    `

	err := pnm.db.QueryRow(query).Scan(&dbRecords, &avgDepth, &maxDepth)
	if err != nil {
		return nil, err
	}

	return map[string]interface{}{
		"cache_size":        cacheSize,
		"max_cache_size":    pnm.maxCacheSize,
		"db_records":        dbRecords,
		"average_depth":     avgDepth,
		"max_depth":         maxDepth,
		"max_allowed_depth": pnm.maxStackDepth,
		"cache_timeout_min": pnm.cacheTimeout.Minutes(),
	}, nil
}

// GetBackButton –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
func (pnm *PersistentNavigationManager) GetBackButton() *tele.Btn {
	return pnm.backBtn
}

// AddBackButton –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
func (pnm *PersistentNavigationManager) AddBackButton(keyboard *tele.ReplyMarkup) {
	if keyboard.InlineKeyboard == nil {
		keyboard.InlineKeyboard = make([][]tele.Btn, 0)
	}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tele.Btn{*pnm.backBtn})
}
