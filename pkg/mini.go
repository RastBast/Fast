package main

import (
	"strings"
	"time"

	tele "gopkg.in/telebot.v3"
)

// UltraSimpleNavigation - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
// –ü—Ä–∏–Ω—Ü–∏–ø: –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –∑–Ω–∞–µ—Ç –∫—É–¥–∞ –æ–Ω–∞ –≤–µ–¥–µ—Ç –Ω–∞–∑–∞–¥
type UltraSimpleNavigation struct {
	// –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ!
}

func NewUltraSimpleNavigation() *UltraSimpleNavigation {
	return &UltraSimpleNavigation{}
}

// CreateBackButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è
func (usn *UltraSimpleNavigation) CreateBackButton(returnTo string) *tele.Btn {
	selector := &tele.ReplyMarkup{}
	return selector.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to:"+returnTo)
}

// CreateMenuButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
func (usn *UltraSimpleNavigation) CreateMenuButton(text, menuID string) *tele.Btn {
	selector := &tele.ReplyMarkup{}
	return selector.Data(text, "goto:"+menuID)
}

// AddBackButton –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
func (usn *UltraSimpleNavigation) AddBackButton(keyboard *tele.ReplyMarkup, returnTo string) {
	if returnTo == "" || returnTo == "main" {
		return // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
	}

	backBtn := usn.CreateBackButton(returnTo)
	if keyboard.InlineKeyboard == nil {
		keyboard.InlineKeyboard = make([][]tele.Btn, 0)
	}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tele.Btn{*backBtn})
}

// IsBackButton –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π "–Ω–∞–∑–∞–¥"
func (usn *UltraSimpleNavigation) IsBackButton(callbackData string) (bool, string) {
	if strings.HasPrefix(callbackData, "back_to:") {
		returnTo := strings.TrimPrefix(callbackData, "back_to:")
		return true, returnTo
	}
	return false, ""
}

// IsMenuButton –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
func (usn *UltraSimpleNavigation) IsMenuButton(callbackData string) (bool, string) {
	if strings.HasPrefix(callbackData, "goto:") {
		menuID := strings.TrimPrefix(callbackData, "goto:")
		return true, menuID
	}
	return false, ""
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - –°–£–ü–ï–† –ü–†–û–°–¢–û–ô –ë–û–¢
type UltraBot struct {
	*tele.Bot
	nav *UltraSimpleNavigation
}

func NewUltraBot(token string) (*UltraBot, error) {
	bot, err := tele.NewBot(tele.Settings{
		Token:  token,
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		return nil, err
	}

	ub := &UltraBot{
		Bot: bot,
		nav: NewUltraSimpleNavigation(),
	}

	ub.setupHandlers()
	return ub, nil
}

func (ub *UltraBot) setupHandlers() {
	ub.Handle("/start", ub.handleStart)
	ub.Handle(tele.OnCallback, ub.handleCallback)
}

func (ub *UltraBot) handleStart(c tele.Context) error {
	return ub.showMainMenu(c)
}

func (ub *UltraBot) handleCallback(c tele.Context) error {
	data := c.Callback().Data

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
	if isBack, returnTo := ub.nav.IsBackButton(data); isBack {
		return ub.showMenu(c, returnTo)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
	if isMenu, menuID := ub.nav.IsMenuButton(data); isMenu {
		return ub.showMenu(c, menuID)
	}

	return c.Respond()
}

func (ub *UltraBot) showMenu(c tele.Context, menuID string) error {
	switch menuID {
	case "main":
		return ub.showMainMenu(c)
	case "channels":
		return ub.showChannelsMenu(c)
	case "settings":
		return ub.showSettingsMenu(c)
	case "add_channel":
		return ub.showAddChannelMenu(c)
	case "language":
		return ub.showLanguageMenu(c)
	default:
		return c.Edit("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ–Ω—é")
	}
}

func (ub *UltraBot) showMainMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btnChannels := ub.nav.CreateMenuButton("üìä –ö–∞–Ω–∞–ª—ã", "channels")
	btnSettings := ub.nav.CreateMenuButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")

	selector.Inline(
		selector.Row(*btnChannels),
		selector.Row(*btnSettings),
	)

	text := "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
	return c.Edit(text, selector, tele.ModeHTML)
}

func (ub *UltraBot) showChannelsMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btnAdd := ub.nav.CreateMenuButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "add_channel")
	btnList := ub.nav.CreateMenuButton("üìã –°–ø–∏—Å–æ–∫", "list_channels")

	selector.Inline(
		selector.Row(*btnAdd, *btnList),
	)

	// –ì–æ–≤–æ—Ä–∏–º –∫–Ω–æ–ø–∫–µ "–Ω–∞–∑–∞–¥" –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
	ub.nav.AddBackButton(selector, "main")

	text := "üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
	return c.Edit(text, selector, tele.ModeHTML)
}

func (ub *UltraBot) showSettingsMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btnLang := ub.nav.CreateMenuButton("üåê –Ø–∑—ã–∫", "language")
	btnNotif := ub.nav.CreateMenuButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "notifications")

	selector.Inline(
		selector.Row(*btnLang, *btnNotif),
	)

	ub.nav.AddBackButton(selector, "main")

	text := "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:"
	return c.Edit(text, selector, tele.ModeHTML)
}

func (ub *UltraBot) showAddChannelMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btn1 := selector.Data("üîó –ü–æ —Å—Å—ã–ª–∫–µ", "add_by_link")
	btn2 := selector.Data("üë§ –ü–æ username", "add_by_username")

	selector.Inline(
		selector.Row(*btn1),
		selector.Row(*btn2),
	)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤
	ub.nav.AddBackButton(selector, "channels")

	text := "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:"
	return c.Edit(text, selector, tele.ModeHTML)
}

func (ub *UltraBot) showLanguageMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btn1 := selector.Data("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "set_lang_ru")
	btn2 := selector.Data("üá∫üá∏ English", "set_lang_en")

	selector.Inline(
		selector.Row(*btn1, *btn2),
	)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
	ub.nav.AddBackButton(selector, "settings")

	text := "üåê <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:"
	return c.Edit(text, selector, tele.ModeHTML)
}
