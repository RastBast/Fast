package main

import (
	"fmt"
	"strings"
	"time"

	tele "gopkg.in/telebot.v3"
)

// HierarchicalNavigation - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏ –º–µ–Ω—é
// –ö–∞–∂–¥–æ–µ –º–µ–Ω—é –∑–Ω–∞–µ—Ç —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è, –∫–∞–∫ –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
type HierarchicalNavigation struct {
	hierarchy map[string]string // menu_id -> parent_id
	backBtn   *tele.Btn
}

func NewHierarchicalNavigation() *HierarchicalNavigation {
	selector := &tele.ReplyMarkup{}
	backBtn := selector.Data("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "nav_back")

	hn := &HierarchicalNavigation{
		hierarchy: make(map[string]string),
		backBtn:   backBtn,
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –º–µ–Ω—é –æ–¥–∏–Ω —Ä–∞–∑
	hn.defineMenuHierarchy()

	return hn
}

// defineMenuHierarchy –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é
func (hn *HierarchicalNavigation) defineMenuHierarchy() {
	// –ü—Ä–æ—Å—Ç–æ –∫–∞—Ä—Ç–∞: —Ç–µ–∫—É—â–µ–µ_–º–µ–Ω—é -> —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ_–º–µ–Ω—é
	hn.hierarchy = map[string]string{
		// –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
		"channels": "main",
		"stats":    "main",
		"settings": "main",
		"profile":  "main",
		"help":     "main",

		// –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã –∫–∞–Ω–∞–ª–æ–≤
		"add_channel":    "channels",
		"list_channels":  "channels",
		"remove_channel": "channels",
		"channel_stats":  "channels",

		// –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		"daily_stats":   "stats",
		"weekly_stats":  "stats",
		"monthly_stats": "stats",
		"export_stats":  "stats",

		// –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
		"language":      "settings",
		"notifications": "settings",
		"theme":         "settings",
		"advanced":      "settings",

		// –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã –ø—Ä–æ—Ñ–∏–ª—è
		"edit_profile":   "profile",
		"view_profile":   "profile",
		"delete_profile": "profile",

		// –ì–ª—É–±–æ–∫–∞—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å (–ø—Ä–∏–º–µ—Ä)
		"lang_russian":   "language",
		"lang_english":   "language",
		"notif_channels": "notifications",
		"notif_stats":    "notifications",
		"theme_dark":     "theme",
		"theme_light":    "theme",

		// –ï—â–µ –≥–ª—É–±–∂–µ
		"notif_channels_new":    "notif_channels",
		"notif_channels_update": "notif_channels",
		"notif_stats_daily":     "notif_stats",
		"notif_stats_weekly":    "notif_stats",
	}
}

// RegisterMenu —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –º–µ–Ω—é —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º
func (hn *HierarchicalNavigation) RegisterMenu(menuID, parentID string) {
	hn.hierarchy[menuID] = parentID
}

// GetParent –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
func (hn *HierarchicalNavigation) GetParent(menuID string) (string, bool) {
	parent, exists := hn.hierarchy[menuID]
	return parent, exists
}

// GetBackButton –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
func (hn *HierarchicalNavigation) GetBackButton() *tele.Btn {
	return hn.backBtn
}

// HasParent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—å
func (hn *HierarchicalNavigation) HasParent(menuID string) bool {
	_, exists := hn.hierarchy[menuID]
	return exists
}

// AddBackButton –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å
func (hn *HierarchicalNavigation) AddBackButton(keyboard *tele.ReplyMarkup, currentMenu string) {
	if !hn.HasParent(currentMenu) {
		return // –ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è - –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏
	}

	if keyboard.InlineKeyboard == nil {
		keyboard.InlineKeyboard = make([][]tele.Btn, 0)
	}
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, []tele.Btn{*hn.backBtn})
}

// GetBreadcrumb –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –¥–æ –∫–æ—Ä–Ω—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏/–ø–æ–∫–∞–∑–∞ –ø—É—Ç–∏)
func (hn *HierarchicalNavigation) GetBreadcrumb(menuID string) []string {
	var path []string
	current := menuID

	// –ò–¥–µ–º –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –¥–æ –∫–æ—Ä–Ω—è
	for current != "" && current != "main" {
		path = append([]string{current}, path...) // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
		parent, exists := hn.hierarchy[current]
		if !exists {
			break
		}
		current = parent
	}

	// –î–æ–±–∞–≤–ª—è–µ–º main –≤ –Ω–∞—á–∞–ª–æ
	if len(path) > 0 {
		path = append([]string{"main"}, path...)
	}

	return path
}

// CreateMenuButton —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
func (hn *HierarchicalNavigation) CreateMenuButton(text, menuID string) *tele.Btn {
	selector := &tele.ReplyMarkup{}
	return selector.Data(text, "menu:"+menuID)
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
type SimpleBot struct {
	*tele.Bot
	nav *HierarchicalNavigation
}

func NewSimpleBot(token string) (*SimpleBot, error) {
	bot, err := tele.NewBot(tele.Settings{
		Token:  token,
		Poller: &tele.LongPoller{Timeout: 10 * time.Second},
	})
	if err != nil {
		return nil, err
	}

	nav := NewHierarchicalNavigation()

	sb := &SimpleBot{
		Bot: bot,
		nav: nav,
	}

	sb.setupHandlers()
	return sb, nil
}

func (sb *SimpleBot) setupHandlers() {
	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
	sb.Handle(sb.nav.GetBackButton(), sb.handleBack)

	// –ö–æ–º–∞–Ω–¥—ã
	sb.Handle("/start", sb.handleStart)

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –º–µ–Ω—é
	sb.Handle(tele.OnCallback, sb.handleCallback)
}

// handleBack - –°–£–ü–ï–† –ü–†–û–°–¢–û–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
func (sb *SimpleBot) handleBack(c tele.Context) error {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –∏–∑ callback query (–∏–ª–∏ –∏–∑ context)
	currentMenu := sb.getCurrentMenu(c)

	// –ü—Ä–æ—Å—Ç–æ –∏—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è –≤ —Å—Ç–∞—Ç–∏—á–Ω–æ–π –∫–∞—Ä—Ç–µ
	parentMenu, hasParent := sb.nav.GetParent(currentMenu)

	if !hasParent {
		return c.Respond(&tele.CallbackResponse{
			Text: "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é",
		})
	}

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –º–µ–Ω—é
	return sb.showMenu(c, parentMenu)
}

// getCurrentMenu –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
func (sb *SimpleBot) getCurrentMenu(c tele.Context) string {
	// –ú–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∏–∑ callback data –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–Ω–æ–ø–∫–∏
	// –ò–ª–∏ –∏–∑ message, –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ user_data
	// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

	text := c.Message().Text
	if text == "" && c.Callback() != nil {
		text = c.Callback().Message.Text
	}

	// –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
	switch {
	case strings.Contains(text, "–ö–∞–Ω–∞–ª—ã"):
		return "channels"
	case strings.Contains(text, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
		return "stats"
	case strings.Contains(text, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
		return "settings"
	case strings.Contains(text, "–ü—Ä–æ—Ñ–∏–ª—å"):
		return "profile"
	case strings.Contains(text, "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"):
		return "add_channel"
	case strings.Contains(text, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"):
		return "notifications"
	case strings.Contains(text, "–Ø–∑—ã–∫"):
		return "language"
	case strings.Contains(text, "–¢–µ–º–∞"):
		return "theme"
	default:
		return "main"
	}
}

func (sb *SimpleBot) handleStart(c tele.Context) error {
	return sb.showMenu(c, "main")
}

func (sb *SimpleBot) handleCallback(c tele.Context) error {
	data := c.Callback().Data

	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" - –æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
	if data == "nav_back" {
		return nil
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
	if strings.HasPrefix(data, "menu:") {
		menuID := strings.TrimPrefix(data, "menu:")
		return sb.showMenu(c, menuID)
	}

	return c.Respond()
}

func (sb *SimpleBot) showMenu(c tele.Context, menuID string) error {
	switch menuID {
	case "main":
		return sb.showMainMenu(c)
	case "channels":
		return sb.showChannelsMenu(c)
	case "stats":
		return sb.showStatsMenu(c)
	case "settings":
		return sb.showSettingsMenu(c)
	case "add_channel":
		return sb.showAddChannelMenu(c)
	case "notifications":
		return sb.showNotificationsMenu(c)
	case "language":
		return sb.showLanguageMenu(c)
	default:
		return c.Edit("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ–Ω—é: " + menuID)
	}
}

func (sb *SimpleBot) showMainMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btnChannels := sb.nav.CreateMenuButton("üìä –ö–∞–Ω–∞–ª—ã", "channels")
	btnStats := sb.nav.CreateMenuButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "stats")
	btnSettings := sb.nav.CreateMenuButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")

	selector.Inline(
		selector.Row(*btnChannels),
		selector.Row(*btnStats, *btnSettings),
	)

	// –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

	text := "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
	return c.Edit(text, selector, tele.ModeHTML)
}

func (sb *SimpleBot) showChannelsMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btnAdd := sb.nav.CreateMenuButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", "add_channel")
	btnList := sb.nav.CreateMenuButton("üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", "list_channels")
	btnStats := sb.nav.CreateMenuButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", "channel_stats")

	selector.Inline(
		selector.Row(*btnAdd),
		selector.Row(*btnList, *btnStats),
	)

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–Ω–∞–∑–∞–¥"
	sb.nav.AddBackButton(selector, "channels")

	breadcrumb := sb.nav.GetBreadcrumb("channels")
	text := fmt.Sprintf("üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏</b>\n\nüìç –ü—É—Ç—å: %v\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", breadcrumb)

	return c.Edit(text, selector, tele.ModeHTML)
}

func (sb *SimpleBot) showSettingsMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btnLang := sb.nav.CreateMenuButton("üåê –Ø–∑—ã–∫", "language")
	btnNotif := sb.nav.CreateMenuButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "notifications")
	btnTheme := sb.nav.CreateMenuButton("üé® –¢–µ–º–∞", "theme")

	selector.Inline(
		selector.Row(*btnLang, *btnNotif),
		selector.Row(*btnTheme),
	)

	sb.nav.AddBackButton(selector, "settings")

	text := "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:"
	return c.Edit(text, selector, tele.ModeHTML)
}

func (sb *SimpleBot) showAddChannelMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btnByLink := selector.Data("üîó –ü–æ —Å—Å—ã–ª–∫–µ", "add_by_link")
	btnByUsername := selector.Data("üë§ –ü–æ username", "add_by_username")

	selector.Inline(
		selector.Row(*btnByLink),
		selector.Row(*btnByUsername),
	)

	sb.nav.AddBackButton(selector, "add_channel")

	breadcrumb := sb.nav.GetBreadcrumb("add_channel")
	text := fmt.Sprintf("‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\nüìç –ü—É—Ç—å: %v\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", breadcrumb)

	return c.Edit(text, selector, tele.ModeHTML)
}

func (sb *SimpleBot) showNotificationsMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btnChannels := sb.nav.CreateMenuButton("üìä –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö", "notif_channels")
	btnStats := sb.nav.CreateMenuButton("üìà –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", "notif_stats")

	selector.Inline(
		selector.Row(*btnChannels),
		selector.Row(*btnStats),
	)

	sb.nav.AddBackButton(selector, "notifications")

	text := "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"
	return c.Edit(text, selector, tele.ModeHTML)
}

func (sb *SimpleBot) showLanguageMenu(c tele.Context) error {
	selector := &tele.ReplyMarkup{}

	btnRu := sb.nav.CreateMenuButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_russian")
	btnEn := sb.nav.CreateMenuButton("üá∫üá∏ English", "lang_english")
	btnDe := sb.nav.CreateMenuButton("üá©üá™ Deutsch", "lang_german")

	selector.Inline(
		selector.Row(*btnRu, *btnEn),
		selector.Row(*btnDe),
	)

	sb.nav.AddBackButton(selector, "language")

	breadcrumb := sb.nav.GetBreadcrumb("language")
	text := fmt.Sprintf("üåê <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞</b>\n\nüìç –ü—É—Ç—å: %v\n\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", breadcrumb)

	return c.Edit(text, selector, tele.ModeHTML)
}
